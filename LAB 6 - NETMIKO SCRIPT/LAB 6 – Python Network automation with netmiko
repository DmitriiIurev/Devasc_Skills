Part 1: Connecting to a single iOS device
- Sending single show command
print("Connecting via SSH => show interface status (brief)")
from netmiko import ConnectHandler
sshCli = ConnectHandler(
    device_type="cisco_ios",
    host=" 10.125.100.187",
    port="22",
    username="admin",
    password="pxl"
    )
output=sshCli.send_command("show ip interface brief")
print(output)

- -Sending multiple show commands
print("Connecting via SSH => show interface status (brief)")
from netmiko import ConnectHandler
sshCli = ConnectHandler(
    device_type="cisco_ios",
    host="10.125.100.187",
    port="22",
    username="admin",
    password="pxl",
    secret="cisco",
    )
output1=sshCli.send_command("show ip interface brief")
output2=sshCli.send_command("show version")
print(output1 + "\n\n" + output2)

- Send multiple configuration commands to a single device
cisco_Switch = {
    "device_type": "cisco_ios",
    "host": "10.125.100.187,
    "username": "admin",
    "password": "pxl",
    "secret": "cisco"}
with ConnectHandler(**cisco_Switch) as net_connect:
    net_connect.enable()
    output - net_connect.send_config_from_file('iosv_l3_config.txt')
    print (output)
    net_connect.disconnect()
from netmiko import ConnectHandler
# Define the device information
device = {
    'device_type': 'cisco_ios',
    'ip': '10.125.100.187',
    'username': 'admin',
    'password': 'pxl',
    'secret': 'cisco',
}

Part 2: Connect to multiple IOS devices
- Send show commands to multiple devices
from netmiko import ConnectHandler

# Create a list of devices with their connection details
devices = [
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.187',
        'username': 'admin',
        'password': 'pxl',
    },
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.181',
        'username': 'admin',
        'password': 'pxl',
    },
    # Add more devices as needed
]

# Iterate over the devices and send show commands
for device in devices:
    try:
        # Establish an SSH connection to the device
        connection = ConnectHandler(**device)
        print(f"Connected to {device['ip']} successfully.")

        # Send show commands
        output = connection.send_command('show version')
        print(f"Output from {device['ip']}:")
        print(output)

        # Close the SSH connection
        connection.disconnect()
        print(f"Disconnected from {device['ip']}.\n")
        
- Send configuration commands to multiple devices
from netmiko import ConnectHandler

# Create a list of devices with their connection details
devices = [
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.187',
        'username': 'admin',
        'password': 'pxl',
    },
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.181',
        'username': 'admin',
        'password': 'pxl',
    },
    # Add more devices as needed
]

# Configuration commands to be sent to the devices
commands = [
    'interface GigabitEthernet0/1',
    'description Connected to Server',
    'no shutdown',
    'exit',
    'interface GigabitEthernet0/2',
    'description Connected to Switch',
    'no shutdown',
    'exit',
    # Add more commands as needed
]

# Iterate over the devices and send configuration commands
for device in devices:
    try:
        # Establish an SSH connection to the device
        connection = ConnectHandler(**device)
        print(f"Connected to {device['ip']} successfully.")

        # Send configuration commands
        output = connection.send_config_set(commands)
        print(f"Output from {device['ip']}:")
        print(output)

        # Save the configuration (optional)
        connection.send_command('write memory')
        print(f"Configuration saved on {device['ip']}.\n")

        # Close the SSH connection
        connection.disconnect()
        print(f"Disconnected from {device['ip']}.\n")


- Run show commands and save the output
from netmiko import ConnectHandler

# Create a list of devices with their connection details
devices = [
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.187',
        'username': 'admin',
        'password': 'pxl',
    },
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.181',
        'username': 'admin',
        'password': 'pxl',
    },
    # Add more devices as needed
]

# Show commands to be executed on the devices
commands = [
    'show version',
    'show interfaces',
    # Add more show commands as needed
]

# Iterate over the devices and execute show commands
for device in devices:
    try:
        # Establish an SSH connection to the device
        connection = ConnectHandler(**device)
        print(f"Connected to {device['ip']} successfully.")

        # Create a filename for the output based on the device IP
        filename = f"{device['ip']}_output.txt"

        # Open the file in write mode
        with open(filename, 'w') as file:
            # Iterate over the show commands
            for command in commands:
                # Execute the command and write the output to the file
                output = connection.send_command(command)
                file.write(f"Command: {command}\n")
                file.write(output)
                file.write('\n')

        print(f"Output from {device['ip']} saved to {filename}.\n")

        # Close the SSH connection
        connection.disconnect()
        print(f"Disconnected from {device['ip']}.\n")

- Backup the device configurations
from netmiko import ConnectHandler
device = {
    'device_type': 'cisco_ios',
    'ip': '10.125.100.187',
    'username': 'admin',
    'password': 'pxl',
    'secret': 'cisco',
}
net_connect = ConnectHandler(**device)
net_connect.enable()
output = net_connect.send_command('show running-config')
filename = 'lab-ra08-a-sw03-confg'
with open(filename, 'w') as f:
    f.write(output)
print(f"Device configuration saved to {filename}")
net_connect.disconnect()
- Configure a subset of Interfaces
from netmiko import ConnectHandler
# Define the device information
device = {
    'device_type': 'cisco_ios',
    'ip': '10.125.100.187',
    'username': 'admin',
    'password': 'pxl',
    'secret': 'cisco',
}

# Define the interfaces to configure
interfaces = ['FastEthernet0/9', 'FastEthernet0/10', 'FastEthernet0/11']

# Define the configuration commands for the interfaces
interface_config_commands = [
    'description Configured by Netmiko',
    'ip address 10.125.100.187',
    'no shutdown',
]
# Establish an SSH connection to the device
net_connect = ConnectHandler(**device)
net_connect.enable()
# Configure each interface in the subset
for interface in interfaces:
    # Enter interface configuration mode
    config_commands = [f'interface {interface}']
    output = net_connect.send_config_set(config_commands)
    # Apply configuration commands for the interface
    output += net_connect.send_config_set(interface_config_commands)
    print(f"Configuration applied to interface {interface}:\n{output}")
# Disconnect from the device
net_connect.disconnect()

- Send device configuration using an external file
from netmiko import ConnectHandler

# Create a list of devices with their connection details
devices = [
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.187',
        'username': 'admin',
        'password': 'pxl',
    },
    {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.181',
        'username': 'admin',
        'password': 'pxl',
    },
    # Add more devices as needed
]

# Specify the filename for the configuration file
config_file = 'config.txt'

# Read the configuration commands from the file
with open(config_file, 'r') as file:
    commands = file.read().splitlines()

# Iterate over the devices and send configuration commands
for device in devices:
    try:
        # Establish an SSH connection to the device
        connection = ConnectHandler(**device)
        print(f"Connected to {device['ip']} successfully.")

        # Send configuration commands
        output = connection.send_config_set(commands)
        print(f"Output from {device['ip']}:")
        print(output)

        # Save the configuration (optional)
        connection.send_command('write memory')
        print(f"Configuration saved on {device['ip']}.\n")

        # Close the SSH connection
        connection.disconnect()
        print(f"Disconnected from {device['ip']}.\n")
        
- Connect using a Python Dictionary
from netmiko import ConnectHandler

# Connection details as a dictionary
device = {
    'device_type': 'cisco_ios',
    'ip': '10.125.100.187',
    'username': 'admin',
    'password': 'pxl',
}

try:
    # Establish an SSH connection to the device
    connection = ConnectHandler(**device)
    print(f"Connected to {device['ip']} successfully.")

    # Send commands or perform other operations
    # ...

    # Close the SSH connection
    connection.disconnect()
    print(f"Disconnected from {device['ip']}.\n")
    
- Execute a script with a Function or classes
from netmiko import ConnectHandler

def connect_to_device(device):
    try:
        # Establish an SSH connection to the device
        connection = ConnectHandler(**device)
        print(f"Connected to {device['ip']} successfully.")

        # Send commands or perform other operations
        # ...

        # Close the SSH connection
        connection.disconnect()
        print(f"Disconnected from {device['ip']}.\n")

    except Exception as e:
        print(f"Failed to connect to {device['ip']}. Error: {str(e)}\n")

def main():
    # Connection details as a dictionary
    device = {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.187',
        'username': 'admin',
        'password': 'pxl',
    }

    connect_to_device(device)

if __name__ == '__main__':
    main()
    
- Execute a script with a statements (if, ifelse, else)
from netmiko import ConnectHandler

def main():
    device = {
        'device_type': 'cisco_ios',
        'ip': '10.125.100.187',
        'username': 'admin',
        'password': 'pxl',
    }

    try:
        connection = ConnectHandler(**device)
        print(f"Connected to {device['ip']} successfully.")

        # Send show command to retrieve interface status
        output = connection.send_command('show interface GigabitEthernet0/1')
        if 'GigabitEthernet0/1 is up' in output:
            print("Interface GigabitEthernet0/1 is up and operational.")
        else:
            print("Interface GigabitEthernet0/1 is down or not operational.")

        # Send show command to retrieve interface speed
        output = connection.send_command('show interface GigabitEthernet0/1 | include BW')
        speed = int(output.split()[2])
        if speed > 1000:
            print("Interface speed is greater than 1000 Mbps.")
        else:
            print("Interface speed is less than or equal to 1000 Mbps.")

        connection.disconnect()
        print(f"Disconnected from {device['ip']}.\n")

    except Exception as e:
        print(f"Failed to connect to {device['ip']}. Error: {str(e)}\n")

if __name__ == '__main__':
    main()
