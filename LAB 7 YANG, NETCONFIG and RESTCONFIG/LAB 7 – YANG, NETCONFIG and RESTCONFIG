Install the CSR1000v VM

Part 1: Install the CSR1000v VM
Step 1: Instructor only: Download the CSR1000v ISO file
Step 2: Download the CSR1000v VM OVA file
Step 3: Install the CSR1000v VM
Step 4: Update the installation ISO location
Step 5: For VirtualBox on Mac and Linux, verify the CSR1000v is using a Host-Only Adapter
Step 6: Start CSR1000v VM
Step 7: VM Loading Process
CSR1kv> enable
CSR1kv#

Part 2: Verify Communications to CSR1000v VM
Step 1: Verify the CSR1000v IPv4 address
CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol
GigabitEthernet1 192.168.56.101 YES DHCP up up
CSR1kv#

Step 2: Launch the DEVASC VM
Step 3: Ping the CSR1000v VM from the DEVASC VM VM
devasc@labvm:~$ ping 192.168.56.101
PING 192.168.56.101 (192.168.56.101) 56(84) bytes of data.
64 bytes from 192.168.56.101: icmp_seq=1 ttl=63 time=8.04 ms
64 bytes from 192.168.56.101: icmp_seq=2 ttl=63 time=3.08 ms
64 bytes from 192.168.56.101: icmp_seq=3 ttl=63 time=1.04 ms
64 bytes from 192.168.56.101: icmp_seq=4 ttl=63 time=1.08 ms

Step 4: Establish a secure shell (SSH) session with the CSR1000v
devasc@labvm:~$ ssh cisco@192.168.56.101
Password:
* *
** **
*** ***
*** Cisco Networking Academy ***
*** ***
*** This software is provided for ***
*** Educational Purposes ***
*** Only in Networking Academies ***
*** ***
** **
* *
CSR1kv# exit

Step 5: From the DEVASC VM, access the CSR1000v WebUI (Web User Interface)
Open a web browser on the DEVASC VM.
For the URL enter: https://192.168.56.101
If your browser displays a warning similar to, "Your connection is not private":
Click Advanced.
Click Proceed to 192.168.56.101 (unsafe).
You will now see a LOGIN screen. Enter the following:
Username: cisco
Password: cisco123!
Click LOGIN NOW.

Step 6: From your local computer, access the CSR1000v WebUI (Web User Interface)

Explore YANG Models
Part 1: Launch the DEVASC VM

Part 2: Explore a YANG Model on GitHub
Step 1: Explore Cisco IOS XE YANG models in the GitHub repository
leaf enabled {
type boolean;
default "true";
description
"This leaf contains the configured, desired state of the
interface.
Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.
Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.";
reference
"RFC 2863: The Interfaces Group MIB - ifAdminStatus";
}

Step 2: Copy the ietf-interfaces.yang model to a folder on your VM
devasc@labvm:~/labs/devnet-src$ mkdir pyang
devasc@labvm:~/labs/devnet-src$

devasc@labvm:~/labs/devnet-src/pyang$ wget https://raw.githubusercontent.com/YangModels/yang/master/vendor/cisco/xe/1693/ietf-interfaces.yang
--2020-06-22 20:42:20-- https://raw.githubusercontent.com/YangModels/yang/master/vendor/cisco/xe/1693/ietf-interfaces.yang
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.192.133, 151.101.128.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 24248 (24K) [text/plain]
Saving to: ‘ietf-interfaces.yang’
ietf-interfac 100% 23.68K --.-KB/s in 0.05s
2020-06-22 20:42:21 (439 KB/s) - ‘ietf-interfaces.yang’ saved [24248/24248]
devasc@labvm:~/labs/devnet-src/pyang$

Part 3: Explore a YANG Model Using pyang
Step 1: Verify pyang is installed and up to date
devasc@labvm:~/labs/devnet-src$ pyang -v
pyang 2.2.1
devasc@labvm:~/labs/devnet-src$

devasc@labvm:~/labs/devnet-src$ pip3 install pyang --upgrade Requirement already up-to-date: pyang in ./.local/lib/python3.8/site-packages (2.2.1) Requirement already satisfied, skipping upgrade: lxml in ./.local/lib/python3.8/site-packages (from pyang) (4.5.0)
devasc@labvm:~/labs/devnet-src$

Step 2: Transform the ietf-interfaces.yang model
devasc@labvm:~/labs/devnet-src$ cd pyang
devasc@labvm:~/labs/devnet-src/pyang$

devasc@labvm:~/labs/devnet-src/pyang$ pyang -h | more
Usage: pyang [options] [<filename>...]
Validates the YANG module in <filename> (or stdin), and all its dependencies.
Options:
-h, --help Show this help message and exit
-v, --version Show version number and exit
<output omitted> -f FORMAT, --format=FORMAT
Convert to FORMAT. Supported formats are: yang, yin,
dsdl, jstree, jsonxsl, capability, identifiers, jtox, uml, name, omni, tree, depend, sample-xml-skeleton
<output omitted>
devasc@labvm:~/labs/devnet-src/pyang$

devasc@labvm:~/labs/devnet-src/pyang$ pyang -f tree ietf-interfaces.yang

Use NETCONF to Access an IOS XE Device
Part 1: Launch the VMs and Verify Connectivity
Step 1: Launch the VMs
Step 2: Verify connectivity between the VMs
Step 3: Verify SSH connectivity to the CSR1kv VM

Part 2: Use a NETCONF Session to Gather Information
Step 1: Check if NETCONF is running on the CSR1kv
CSR1kv# show platform software yang-management process
confd : Running
nesd : Running
syncfd : Running ncsshd : Running
dmiauthd : Running
nginx : Running
ndbmand : Running
pubd : Running
CSR1kv#

CSR1kv# config t
CSR1kv (config)# netconf-yang

Step 2: Access the NETCONF process through an SSH terminal
devasc@labvm:~$ ssh cisco@192.168.56.101 -p 830 -s netconf
cisco@192.168.56.101's password:

<?xml version="1.0" encoding="UTF-8"?> <hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<capabilities>
<capability>urn:ietf:params:netconf:base:1.0</capability>
<capability>urn:ietf:params:netconf:base:1.1</capability>
<capability>urn:ietf:params:netconf:capability:writable-running:1.0</capability>
<capability>urn:ietf:params:netconf:capability:xpath:1.0</capability>
<capability>urn:ietf:params:netconf:capability:validate:1.0</capability>
<capability>urn:ietf:params:netconf:capability:validate:1.1</capability>
(output omitted)
</capability>
</capabilities> <session-id>20</session-id></hello>]]>]]>

Step 3: Start a NETCONF session by sending a hello message from the client
<hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<capabilities>
<capability>urn:ietf:params:netconf:base:1.0</capability>
</capabilities>
</hello> ]]>]]>

CSR1kv> en
CSRk1v# show netconf-yang sessions
R: Global-lock on running datastore
C: Global-lock on candidate datastore
S: Global-lock on startup datastore
Number of sessions : 1
session-id transport username source-host global-lock
------------------------------------------------------------------------------- 20 netconf-ssh cisco 192.168.56.1 None

Step 4: Send RPC messages to an IOS XE device
<rpc message-id="103" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"> <get>
<filter>
<interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"/>
</filter>
</get>
</rpc>
]]>]]>

<?xml version="1.0" encoding="UTF-8"?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="103"><data><interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-
interfaces"><interface><name>GigabitEthernet1</name><description>VBox</description><type xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type">ianaift:ethernetCsmacd</type><enabled>true</enabled><ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"></ipv4><ipv6 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"></ipv6></interface></interfaces></data></rpc-reply>]]>]]>

<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="103">
<data>
<interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces">
<interface>
<name>GigabitEthernet1</name>
<description>VBox</description>
<type xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type">ianaift:ethernetCsmacd</type>
<enabled>true</enabled>
<ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"/>
<ipv6 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"/>
</interface>
</interfaces>
</data>
</rpc-reply>

CSR1kv# show netconf-yang sessions
There are no active sessions
CSR1kv#

Step 5: Close the NETCONF session
<rpc message-id="9999999" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<close-session />
</rpc>

Part 3: Use ncclient to Connect to NETCONF
Step 1: Verify that ncclient is installed and ready for use
devasc@labvm:~$ pip3 list --format=columns | more
Package Version
---------------------- -----------
ansible 2.9.6
apache-libcloud 2.8.0
appdirs 1.4.3
argcomplete 1.8.1
astroid 2.3.3
(output omitted) ncclient 0.6.7
netaddr 0.7.19
netifaces 0.10.4
netmiko 3.1.0
ntlm-auth 1.1.0
oauthlib 3.1.0
(output omitted)
xmltodict 0.12.0
zipp 1.0.0
devasc@labvm:~$

Step 2: Create a script to use ncclient to connect to the NETCONF service
devasc@labvm:~/labs/devnet-src$ mkdir netconf
devasc@labvm:~/labs/devnet-src$

from ncclient import manager
m = manager.connect(
host="192.168.56.101",
port=830,
username="cisco",
password="cisco123!",
Lab - Use NETCONF to Access an IOS XE Device
© 2020 - 2020 Cisco and/or its affiliates. All rights reserved. Cisco Public Page 7 of 16 www.netacad.com
hostkey_verify=False
)

devasc@labvm:~/labs/devnet-src$ cd netconf/
devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
devasc@labvm:~/labs/devnet-src/netconf$

Step 3: Add a print function to the script so that the NETCONF capabilities for the CSR1kv are listed
print("#Supported Capabilities (YANG models):")
for capability in m.server_capabilities:
print(capability)

devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
#Supported Capabilities (YANG models):
urn:ietf:params:netconf:base:1.0
urn:ietf:params:netconf:base:1.1
urn:ietf:params:netconf:capability:writable-running:1.0
urn:ietf:params:netconf:capability:xpath:1.0
<output omitted>
urn:ietf:params:xml:ns:netconf:base:1.0?module=ietf-netconf&revision=2011-06-01
urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults?module=ietf-netconf-with-defaults&revision=2011-06-01
urn:ietf:params:netconf:capability:notification:1.1
devasc@labvm:~/labs/devnet-src/netconf$

Part 4: Use ncclient to Retrieve the Configuration
Step 1: Use the get_config() function to retrieve the running configuration for R1
'''
print("#Supported Capabilities (YANG models):")
for capability in m.server_capabilities:
print(capability) '''

netconf_reply = m.get_config(source="running")
print(netconf_reply)

devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
<?xml version="1.0" encoding="UTF-8"?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:3f31bedc-5671-47ca-9781-4d3d7aadae24" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"><data><native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native"><version>16.9</version><boot-start-marker/><boot-end-marker/><banner><motd><banner>
(output omitted)
devasc@labvm:~/labs/devnet-src/netconf$

<?xml version="1.0" encoding="UTF-8"?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:3f31bedc-5671-47ca-9781-4d3d7aadae24">
<data>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<version>16.9</version>
<boot-start-marker/>
<boot-end-marker/>
<banner>
<motd>
<banner>^C</banner>
</motd>
</banner>
<service>
<timestamps>
<debug>
<datetime>
<msec/>
</datetime>
</debug>
<log>
<datetime>
<msec/>
</datetime>
</log>
</timestamps>
</service>
<platform>
<console xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-platform">
<output>virtual</output>
</console>
</platform>
<hostname>CSR1kv</hostname>
(output omitted)

Step 2: Use Python to prettify the XML
import xml.dom.minidom

print(xml.dom.minidom.parseString(netconf_reply.xml).toprettyxml())

devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
<?xml version="1.0" ?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:3a5f6abc-76b4-436d-9e9a-7758091c28b7">
<data>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<version>16.9</version>
<boot-start-marker/>
<boot-end-marker/>
<banner>
<motd>
<banner>^C</banner>
</motd>
</banner>
(output omitted)
</data>
</rpc-reply>
devasc@labvm:~/labs/devnet-src/netconf$

Step 3: Use a filter with get_config() to only retrieve a specific YANG model
netconf_filter = """
<filter>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native" />
</filter>
"""
netconf_reply = m.get_config(source="running", filter=netconf_filter)
print(xml.dom.minidom.parseString(netconf_reply.xml).toprettyxml())

devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
<?xml version="1.0" ?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:4da5b736-1d33-47c3-8e3c-349414be0958">
<data> <native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<version>16.9</version>
<boot-start-marker/>
<boot-end-marker/>
<banner>
<motd>
<banner>^C</banner>
</motd>
</banner>
<service>
<timestamps>
<debug>
<datetime>
<msec/>
</datetime>
</debug>
<log>
<datetime>
<msec/>
</datetime>
</log>
</timestamps>
</service>
<platform>
<console xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-platform">
<output>virtual</output>
</console>
</platform>
<hostname>CSR1kv</hostname>
(output omitted) </native>

Part 5: Use ncclient to Configure a Device
Step 1: Use ncclient to edit the hostname for the CSR1kv
devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
<?xml version="1.0" ?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:4da5b736-1d33-47c3-8e3c-349414be0958">
<data>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
(output omitted) <hostname>CSR1kv</hostname>
(output omitted)

netconf_hostname = """
<config>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<hostname>NEWHOSTNAME</hostname>
</native>
</config>
"""

netconf_reply = m.edit_config(target="running", config=netconf_hostname)

print(xml.dom.minidom.parseString(netconf_reply.xml).toprettyxml())

<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:e304b225-7951-4029-afd5-59e8e7edbaa0"> <ok/>
</rpc-reply>
devasc@labvm:~/labs/devnet-src/netconf$

Step 2: Use ncclient to create a new loopback interface on R1
netconf_loopback = """
<config>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<interface>
<Loopback>
<name>1</name>
<description>My first NETCONF loopback</description>
<ip>
<address>
<primary>
<address>10.1.1.1</address>
<mask>255.255.255.0</mask>
</primary>
</address>
</ip>
</Loopback>
</interface>
</native>
</config>
"""

netconf_reply = m.edit_config(target="running", config=netconf_loopback)
print(xml.dom.minidom.parseString(netconf_reply.xml).toprettyxml())

devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
(output omitted)
<?xml version="1.0" ?>
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:98437f47-7a93-4cac-9b9e-9bc8afc9dfa1"> <ok/>
</rpc-reply>
devasc@labvm:~/labs/devnet-src/netconf$

CSR1kv>en
CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol
GigabitEthernet1 192.168.56.101 YES DHCP up up Loopback1 10.1.1.1 YES other up up
CSR1kv# show run | section interface Loopback1
interface Loopback1
description My first NETCONF loopback
ip address 10.1.1.1 255.255.255.0
CSR1kv#

Step 3: Attempt to create a new loopback interface with the same IPv4 address
netconf_newloop = """
<config>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<interface>
<Loopback>
<name>2</name>
<description>My second NETCONF loopback</description>
<ip>
<address>
<primary>
<address>10.1.1.1</address>
<mask>255.255.255.0</mask>
</primary>
</address>
</ip>
</Loopback>
</interface>
</native>
</config>
"""

netconf_reply = m.edit_config(target="running", config=netconf_newloop)

devasc@labvm:~/labs/devnet-src/netconf$ python3 ncclient-netconf.py
Traceback (most recent call last):
File "ncclient-netconf.py", line 80, in <module>
netconf_reply = m.edit_config(target="running", config=netconf_newloop)
File "/home/devasc/.local/lib/python3.8/site-packages/ncclient/manager.py", line 231, in execute
return cls(self._session,
File "/home/devasc/.local/lib/python3.8/site-packages/ncclient/operations/edit.py", line 69, in request
return self._request(node)
File "/home/devasc/.local/lib/python3.8/site-packages/ncclient/operations/rpc.py", line 348, in _request
raise self._reply.error ncclient.operations.rpc.RPCError: inconsistent value: Device refused one or more commands
devasc@labvm:~/labs/devnet-src/netconf$

CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol
GigabitEthernet1 192.168.56.101 YES DHCP up up Loopback1 10.1.1.1 YES other up up

Part 6: Challenge: Modify the Program Used in This Lab


Use RESTCONF to Access an IOS XE Device
Part 1: Launch the VMs and Verify Connectivity
Step 1: Launch the VMs
Step 2: Verify connectivity between the VMs
Step 3: Verify SSH connectivity to the CSR1kv VM

Part 2: Configure an IOS XE Device for RESTCONF Access
Step 1: Verify that the RESTCONF daemons are running
CSR1kv# show platform software yang-management process

Step 2: Enable and verify the RESTCONF service
CSR1kv#configure terminal
CSR1kv(config)# restconf

CSR1kv# show platform software yang-management process

Step 3: Enable and verify the HTTPS service
CSR1kv# configure terminal
CSR1kv(config)# ip http secure-server
CSR1kv(config)# ip http authentication local

CSR1kv# show platform software yang-management process

Part 3: Open and Configure Postman
Step 1: Open Postman
Step 2: Disable SSL certification verification
Click File > Settings.
Under the General tab, set the SSL certificate verification to OFF.
Close the Settings dialog box.

Part 4: Use Postman to Send GET Requests
Step 1: Explore the Postman user interface
the center, you will see the Launchpad. You can explore this area if you wish.
Click the plus sign (+) next to the Launchpad tab to open a GET Untitled Request.

Step 2: Enter the URL for the CSR1kv
https://192.168.56.101/restconf/

Step 3: Enter authentication credentials
Click the Authorization tab.
Under Type, click the down arrow next to “Inherit auth from parent” and choose Basic Auth.
For Username and Password, enter the local authentication credentials for the CSR1kv:
Username: cisco
Password: cisco123!
Click Headers. Then click the 7 hidden. 

Step 4: Set JSON as the data type to send to and receive from the CSR1kv
In the Headers area, click in the first blank Key field and type Content-Type for the type of key. In the Value field, type application/yang-data+json. This tells Postman to send JSON data to the CSR1kv.
Below your Content-Type key, add another key/value pair. The Key field is Accept and the Value field is application/yang-data+json.

Step 5: Send the API request to the CSR1kv
{
"ietf-restconf:restconf": {
"data": {},
"operations": {},
"yang-library-version": "2016-06-21"
}
}

Step 6: Use a GET request to gather the information for all interfaces on the CSR1kv
https://192.168.56.101/restconf/data/ietf-interfaces:interfaces

"ietf-interfaces:interfaces": {
"interface": [
{
"name": "GigabitEthernet1",
"description": "VBox",
"type": "iana-if-type:ethernetCsmacd",
"enabled": true,
"ietf-ip:ipv4": {},
"ietf-ip:ipv6": {}
}
]
}
}

Step 7: Use a GET request to gather information for a specific interface on the CSR1kv
https://192.168.56.101/restconf/data/ietf-interfaces:interfaces/interface=GigabitEthernet1

{
"ietf-interfaces:interface": {
"name": "GigabitEthernet1",
"description": "VBox",
"type": "iana-if-type:ethernetCsmacd",
"enabled": true, "ietf-ip:ipv4": {},
"ietf-ip:ipv6": {}
}
}

CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol GigabitEthernet1 192.168.56.101 YES DHCP up up
CSR1kv#

CSR1kv# conf t
CSR1kv(config)# interface g1
CSR1kv(config-if)# ip address 192.168.56.101 255.255.255.0
CSR1kv(config-if)# end
CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol GigabitEthernet1 192.168.56.101 YES manual up up
CSR1kv#

{
"ietf-interfaces:interface": {
"name": "GigabitEthernet1",
"description": "VBox",
"type": "iana-if-type:ethernetCsmacd",
"enabled": true, "ietf-ip:ipv4": {
"address": [
{ "ip": "192.168.56.101", "netmask": "255.255.255.0"
}
]
},
"ietf-ip:ipv6": {}
}
}

Part 5: Use Postman to Send a PUT Request
Step 1: Duplicate and modify the last GET request
https://192.168.56.101/restconf/data/ietf-interfaces:interfaces/interface=Loopback1


Step 2: Configure the body of the request specifying the information for the new loopback
{
"ietf-interfaces:interface": { "name": "Loopback1", "description": "My first RESTCONF loopback", "type": "iana-if-type:softwareLoopback",
"enabled": true,
"ietf-ip:ipv4": {
"address": [
{ "ip": "10.1.1.1",
"netmask": "255.255.255.0"
}
]
},
"ietf-ip:ipv6": {}
}
}

CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol
GigabitEthernet1 192.168.56.101 YES manual up up Loopback1 10.1.1.1 YES other up up
CSR1kv#

Part 6: Use a Python script to Send GET Requests
Step 1: Create the RESTCONF directory and start the script
devasc@labvm:~/labs/devnet-src$ mkdir restconf
devasc@labvm:~/labs/devnet-src$

import json
import requests
requests.packages.urllib3.disable_warnings()


Step 2: Create the variables that will be the components of the request
api_url = "https://192.168.56.101/restconf/data/ietf-interfaces:interfaces"

headers = { "Accept": "application/yang-data+json",
"Content-type":"application/yang-data+json"

basicauth = ("cisco", "cisco123!")

Step 3: Create a variable to send the request and store the JSON response
resp = requests.get(api_url, auth=basicauth, headers=headers, verify=False)

print(resp)

devasc@labvm:~/labs/devnet-src$ cd restconf/ devasc@labvm:~/labs/devnet-src/restconf$ python3 restconf-get.py 
<Response [200]> 
devasc@labvm:~/labs/devnet-src/restconf$

Step 4: Format and display the JSON data received from the CSR1kv
response_json = resp.json()

print(response_json)

devasc@labvm:~/labs/devnet-src/restconf$ python3 restconf-get.py
<Response [200]>
{'ietf-interfaces:interfaces': {'interface': [{'name': 'GigabitEthernet1', 'description': 'VBox', 'type': 'iana-if-type:ethernetCsmacd', 'enabled': True, 'ietf-ip:ipv4': {'address': [{'ip': '192.168.56.101', 'netmask': '255.255.255.0'}]}, 'ietf-ip:ipv6': {}}, {'name': 'Loopback1', 'description': 'My first RESTCONF loopback', 'type': 'iana-if-type:softwareLoopback', 'enabled': True, 'ietf-ip:ipv4': {'address': [{'ip': '10.1.1.1', 'netmask': '255.255.255.0'}]}, 'ietf-ip:ipv6': {}}]}}
devasc@labvm:~/labs/devnet-src/restconf$

print(json.dumps(response_json, indent=4))

devasc@labvm:~/labs/devnet-src/restconf$ python3 restconf-get.py
<Response [200]>
{
"ietf-interfaces:interfaces": {
"interface": [
{
"name": "GigabitEthernet1",
"description": "VBox",
"type": "iana-if-type:ethernetCsmacd",
"enabled": true,
"ietf-ip:ipv4": {
"address": [
{
"ip": "192.168.56.101",
"netmask": "255.255.255.0"
}
]
},
"ietf-ip:ipv6": {}
},
{
"name": "Loopback1",
"description": "My first RESTCONF loopback",
"type": "iana-if-type:softwareLoopback",
"enabled": true,
"ietf-ip:ipv4": {
"address": [
{
"ip": "10.1.1.1",
"netmask": "255.255.255.0"
}
]
},
"ietf-ip:ipv6": {}
}
]
}
}
devasc@labvm:~/labs/devnet-src/restconf$

Part 7: Use a Python Script to Send a PUT Request
Step 1: Import modules and disable SSL warnings
import json
import requests
requests.packages.urllib3.disable_warnings()



Step 2: Create the variables that will be the components of the request
api_url = "https://192.168.56.101/restconf/data/ietf-interfaces:interfaces/interface=Loopback2"

headers = { "Accept": "application/yang-data+json",
"Content-type":"application/yang-data+json"

basicauth = ("cisco", "cisco123!")

yangConfig = {
"ietf-interfaces:interface": { "name": "Loopback2",
"description": "My second RESTCONF loopback",
"type": "iana-if-type:softwareLoopback", "enabled": True,
"ietf-ip:ipv4": {
"address": [
{ "ip": "10.2.1.1",
"netmask": "255.255.255.0"
}
]
},
"ietf-ip:ipv6": {}
}
}

Step 3: Create a variable to send the request and store the JSON response
resp = requests.put(api_url, data=json.dumps(yangConfig), auth=basicauth, headers=headers, verify=False)

if(resp.status_code >= 200 and resp.status_code <= 299):
print("STATUS OK: {}".format(resp.status_code))
else:
print('Error. Status Code: {} \nError message: {}'.format(resp.status_code,resp.json()))

CSR1kv# show ip interface brief

• Task verification:
Checkout screenshots
