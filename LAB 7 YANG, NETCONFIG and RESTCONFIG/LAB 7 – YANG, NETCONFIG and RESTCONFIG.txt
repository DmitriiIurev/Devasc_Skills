Install the CSR1000v VM

Part 1: Install the CSR1000v VM
Step 1: Instructor only: Download the CSR1000v ISO file
Step 2: Download the CSR1000v VM OVA file
Step 3: Install the CSR1000v VM
Step 4: Update the installation ISO location
Step 5: For VirtualBox on Mac and Linux, verify the CSR1000v is using a Host-Only Adapter
Step 6: Start CSR1000v VM
Step 7: VM Loading Process
CSR1kv> enable
CSR1kv#

Part 2: Verify Communications to CSR1000v VM
Step 1: Verify the CSR1000v IPv4 address
CSR1kv# show ip interface brief
Interface IP-Address OK? Method Status Protocol
GigabitEthernet1 192.168.56.101 YES DHCP up up
CSR1kv#

Step 2: Launch the DEVASC VM
Step 3: Ping the CSR1000v VM from the DEVASC VM VM
devasc@labvm:~$ ping 192.168.56.101
PING 192.168.56.101 (192.168.56.101) 56(84) bytes of data.
64 bytes from 192.168.56.101: icmp_seq=1 ttl=63 time=8.04 ms
64 bytes from 192.168.56.101: icmp_seq=2 ttl=63 time=3.08 ms
64 bytes from 192.168.56.101: icmp_seq=3 ttl=63 time=1.04 ms
64 bytes from 192.168.56.101: icmp_seq=4 ttl=63 time=1.08 ms

Step 4: Establish a secure shell (SSH) session with the CSR1000v
devasc@labvm:~$ ssh cisco@192.168.56.101
Password:
* *
** **
*** ***
*** Cisco Networking Academy ***
*** ***
*** This software is provided for ***
*** Educational Purposes ***
*** Only in Networking Academies ***
*** ***
** **
* *
CSR1kv# exit

Step 5: From the DEVASC VM, access the CSR1000v WebUI (Web User Interface)
Open a web browser on the DEVASC VM.
For the URL enter: https://192.168.56.101
If your browser displays a warning similar to, "Your connection is not private":
Click Advanced.
Click Proceed to 192.168.56.101 (unsafe).
You will now see a LOGIN screen. Enter the following:
Username: cisco
Password: cisco123!
Click LOGIN NOW.

Step 6: From your local computer, access the CSR1000v WebUI (Web User Interface)

Explore YANG Models
Part 1: Launch the DEVASC VM

Part 2: Explore a YANG Model on GitHub
Step 1: Explore Cisco IOS XE YANG models in the GitHub repository
leaf enabled {
type boolean;
default "true";
description
"This leaf contains the configured, desired state of the
interface.
Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.
Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.";
reference
"RFC 2863: The Interfaces Group MIB - ifAdminStatus";
}

Step 2: Copy the ietf-interfaces.yang model to a folder on your VM
devasc@labvm:~/labs/devnet-src$ mkdir pyang
devasc@labvm:~/labs/devnet-src$

devasc@labvm:~/labs/devnet-src/pyang$ wget https://raw.githubusercontent.com/YangModels/yang/master/vendor/cisco/xe/1693/ietf-interfaces.yang
--2020-06-22 20:42:20-- https://raw.githubusercontent.com/YangModels/yang/master/vendor/cisco/xe/1693/ietf-interfaces.yang
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.192.133, 151.101.128.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 24248 (24K) [text/plain]
Saving to: ‘ietf-interfaces.yang’
ietf-interfac 100% 23.68K --.-KB/s in 0.05s
2020-06-22 20:42:21 (439 KB/s) - ‘ietf-interfaces.yang’ saved [24248/24248]
devasc@labvm:~/labs/devnet-src/pyang$

Part 3: Explore a YANG Model Using pyang
Step 1: Verify pyang is installed and up to date
devasc@labvm:~/labs/devnet-src$ pyang -v
pyang 2.2.1
devasc@labvm:~/labs/devnet-src$

devasc@labvm:~/labs/devnet-src$ pip3 install pyang --upgrade Requirement already up-to-date: pyang in ./.local/lib/python3.8/site-packages (2.2.1) Requirement already satisfied, skipping upgrade: lxml in ./.local/lib/python3.8/site-packages (from pyang) (4.5.0)
devasc@labvm:~/labs/devnet-src$

Step 2: Transform the ietf-interfaces.yang model
devasc@labvm:~/labs/devnet-src$ cd pyang
devasc@labvm:~/labs/devnet-src/pyang$

devasc@labvm:~/labs/devnet-src/pyang$ pyang -h | more
Usage: pyang [options] [<filename>...]
Validates the YANG module in <filename> (or stdin), and all its dependencies.
Options:
-h, --help Show this help message and exit
-v, --version Show version number and exit
<output omitted> -f FORMAT, --format=FORMAT
Convert to FORMAT. Supported formats are: yang, yin,
dsdl, jstree, jsonxsl, capability, identifiers, jtox, uml, name, omni, tree, depend, sample-xml-skeleton
<output omitted>
devasc@labvm:~/labs/devnet-src/pyang$

devasc@labvm:~/labs/devnet-src/pyang$ pyang -f tree ietf-interfaces.yang

Use NETCONF to Access an IOS XE Device
Part 1: Launch the VMs and Verify Connectivity
Step 1: Launch the VMs
Step 2: Verify connectivity between the VMs
Step 3: Verify SSH connectivity to the CSR1kv VM

Part 2: Use a NETCONF Session to Gather Information
Step 1: Check if NETCONF is running on the CSR1kv
Step 2: Access the NETCONF process through an SSH terminal
Step 3: Start a NETCONF session by sending a hello message from the client
Step 4: Send RPC messages to an IOS XE device
Step 5: Close the NETCONF session

Part 3: Use ncclient to Connect to NETCONF
Step 1: Verify that ncclient is installed and ready for use
Step 2: Create a script to use ncclient to connect to the NETCONF service
Step 3: Add a print function to the script so that the NETCONF capabilities for the CSR1kv are listed

Part 4: Use ncclient to Retrieve the Configuration
Step 1: Use the get_config() function to retrieve the running configuration for R1
Step 2: Use Python to prettify the XML
Step 3: Use a filter with get_config() to only retrieve a specific YANG model

Part 5: Use ncclient to Configure a Device
Step 1: Use ncclient to edit the hostname for the CSR1kv
Step 2: Use ncclient to create a new loopback interface on R1
Step 3: Attempt to create a new loopback interface with the same IPv4 address

Part 6: Challenge: Modify the Program Used in This Lab

Use RESTCONF to Access an IOS XE Device
Part 1: Launch the VMs and Verify Connectivity
Step 1: Launch the VMs
Step 2: Verify connectivity between the VMs
Step 3: Verify SSH connectivity to the CSR1kv VM

Part 2: Configure an IOS XE Device for RESTCONF Access
Step 1: Verify that the RESTCONF daemons are running
Step 2: Enable and verify the RESTCONF service
Step 3: Enable and verify the HTTPS service

Part 3: Open and Configure Postman
Step 1: Open Postman
Step 2: Disable SSL certification verification

Part 4: Use Postman to Send GET Requests
Step 1: Explore the Postman user interface
Step 2: Enter the URL for the CSR1kv
Step 3: Enter authentication credentials
Step 4: Set JSON as the data type to send to and receive from the CSR1kv
Step 5: Send the API request to the CSR1kv
Step 6: Use a GET request to gather the information for all interfaces on the CSR1kv
Step 7: Use a GET request to gather information for a specific interface on the CSR1kv

Part 5: Use Postman to Send a PUT Request
Step 1: Duplicate and modify the last GET request
Step 2: Configure the body of the request specifying the information for the new loopback

Part 6: Use a Python script to Send GET Requests
Step 1: Create the RESTCONF directory and start the script
Step 2: Create the variables that will be the components of the request
Step 3: Create a variable to send the request and store the JSON response
Step 4: Format and display the JSON data received from the CSR1kv

Part 7: Use a Python Script to Send a PUT Request
Step 1: Import modules and disable SSL warnings
Step 2: Create the variables that will be the components of the request
Step 3: Create a variable to send the request and store the JSON response

