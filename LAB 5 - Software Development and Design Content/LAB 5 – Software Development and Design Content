Software Version Control with Git

Part 1: Launch the DEVASC VM

Part 2: Initializing Git
Step 1: Open a terminal in the DEVASC-LABVM

Step 2: Initialize a Git Repository
devasc@labvm:~$ git config --global user.name "SampleUser"
devasc@labvm:~$ git config --global user.email sample@example.com

devasc@labvm:~$ git config --list
user.name=SampleUser
user.email=sample@example.com
devasc@labvm:~$

devasc@labvm:~$ cd labs/devnet-src/
devasc@labvm:~/labs/devnet-src$

devasc@labvm:~/labs/devnet-src$ mkdir git-intro
devasc@labvm:~/labs/devnet-src$ cd git-intro
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git init
Initialized empty Git repository in /home/devasc/labs/devnet-src/git-intro/.git/
devasc@labvm:~/labs/devnet-src/git-intro$ ls -a . .. .git
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git status On branch master
No commits yet
nothing to commit (create/copy files and use "git add" to track)
devasc@labvm:~/labs/devnet-src/git-intro$

Part 3: Staging and Committing a File in the Repository
Step 1: Create a file

devasc@labvm:~/labs/devnet-src/git-intro$ echo "I am on my way to passing the Cisco DEVASC exam" > DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ echo "I am on my way to passing the Cisco DEVASC exam" > DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ ls -la
total 16
drwxrwxr-x 3 devasc devasc 4096 Apr 17 20:38 .
drwxrwxr-x 5 devasc devasc 4096 Apr 17 19:50 .. -rw-rw-r-- 1 devasc devasc 48 Apr 17 20:38 DEVASC.txt
drwxrwxr-x 7 devasc devasc 4096 Apr 17 19:57 .git
evasc@labvm:~/src/git-intro$ cat DEVASC.txt
I am on my way to passing the Cisco DEVASC exam
devasc@labvm:~/labs/devnet-src/git-intro$

Step 2: Examine the Repository Status

devasc@labvm:~/labs/devnet-src/git-intro$ git status
On branch master
No commits yet
Untracked files:
(use "git add <file>..." to include in what will be committed) DEVASC.txt
nothing added to commit but untracked files present (use "git add" to track)
devasc@labvm:~/labs/devnet-src/git-intro$

Step 3: Staging the File

devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt

devasc@labvm:~/labs/devnet-src/git-intro$ git status
On branch master
No commits yet
Changes to be committed:
(use "git rm --cached <file>..." to unstage) new file: DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$

Step 4: Committing a File

devasc@labvm:~/labs/devnet-src/git-intro$ git commit -m "Committing DEVASC.txt to begin tracking changes" [master (root-commit) b510f8e] Committing DEVASC.txt to begin tracking changes
1 file changed, 1 insertion(+)
create mode 100644 DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$

Step 5: Viewing the Commit History

devasc@labvm:~/labs/devnet-src/git-intro$ git log commit b510f8e5f9f63c97432d108a0413567552c07356 (HEAD -> master) Author: Sample User <sample@example.com> Date: Sat Apr 18 18:03:28 2020 +0000
Committing DEVASC.txt to begin tracking changes
devasc@labvm:~/labs/devnet-src/git-intro$

Part 4: Modifying the File and Tracking the Changes
Step 1: Modify the file
devasc@labvm:~/labs/devnet-src/git-intro$ echo "I am beginning to understand Git!" >> DEVASC.txt

devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt
I am on my way to passing the Cisco DEVASC exam
I am beginning to understand Git!
devasc@labvm:~/labs/devnet-src/git-intro$

Step 2: Verify the change to the repository
devasc@labvm:~/labs/devnet-src/git-intro$ git status
On branch master
Changes not staged for commit:
(use "git add <file>..." to update what will be committed)
(use "git restore <file>..." to discard changes in working directory) modified: DEVASC.txt

Step 3: Stage the modified file
devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt


Step 4: Commit the staged file
devasc@labvm:~/labs/devnet-src/git-intro$ git commit -m "Added additional line to file" [master 9f5c4c5] Added additional line to file
1 file changed, 1 insertion(+)
devasc@labvm:~/labs/devnet-src/git-intro$

Step 5: Verify the changes in the repository
devasc@labvm:~/labs/devnet-src/git-intro$ git log commit 9f5c4c5d630e88abe2a873fe48144e25ebe7bd6a (HEAD -> master)
Author: Sample User <sample@example.com> Date: Sat Apr 18 19:17:50 2020 +0000
Added additional line to file
commit b510f8e5f9f63c97432d108a0413567552c07356
Author: Sample User <sample@example.com> Date: Sat Apr 18 18:03:28 2020 +0000
Committing DEVASC.txt to begin tracking changes
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git diff b510f8e 9f5c4c5

diff --git a/DEVASC.txt b/DEVASC.txt
index 93cd3fb..085273f 100644
--- a/DEVASC.txt
+++ b/DEVASC.txt
@@ -1 +1,2 @@
I am on my way to passing the Cisco DEVASC exam +I am beginning to understand Git!
devasc@labvm:~/labs/devnet-src/git-intro$

Part 5: Branches and Merging
Step 1: Create a new branch
devasc@labvm:~/labs/devnet-src/git-intro$ git branch feature

Step 2: Verify current branch
devasc@labvm:~/labs/devnet-src/git-intro$ git branch
feature * master
devasc@labvm:~/labs/devnet-src/git-intro$

Step 3: Checkout the new branch
devasc@labvm:~/labs/devnet-src/git-intro$ git checkout feature

Step 4: Verify current branch
devasc@labvm:~/labs/devnet-src/git-intro$ git branch * feature
master
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ echo "This text was added originally while in the feature branch" >> DEVASC.txt

devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt
I am on my way to passing the Cisco DEVASC exam

I am beginning to understand Git! This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 5: Stage the modified file in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt

On branch feature
Changes to be committed:
(use "git restore --staged <file>..." to unstage) modified: DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$

Step 6: Commit the staged file in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$ git commit -m "Added a third line in feature branch" [feature cd828a7] Added a third line in feature branch
1 file changed, 1 insertion(+)
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git log commit cd828a73102cf308981d6290113c358cbd387620 (HEAD -> feature)
Author: Sample User <sample@example.com>
Date: Sat Apr 18 22:59:48 2020 +0000
Added a third line in feature branch
commit 9f5c4c5d630e88abe2a873fe48144e25ebe7bd6a (master)
Author: Sample User <sample@example.com>
Date: Sat Apr 18 19:17:50 2020 +0000
Added additional line to file
commit b510f8e5f9f63c97432d108a0413567552c07356
Author: Sample User <sample@example.com>
Date: Sat Apr 18 18:03:28 2020 +0000
Committing DEVASC.txt to begin tracking changes
devasc@labvm:~/labs/devnet-src/git-intro$

Step 7: Checkout the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ git checkout master
Switched to branch 'master'
devasc@labvm:~/labs/devnet-src/git-intro$ git branch
feature * master
devasc@labvm:~/labs/devnet-src/git-intro$

Step 8: Merge file contents from feature to master branch
devasc@labvm:~/labs/devnet-src/git-intro$ git merge feature
Updating 9f5c4c5..cd828a7
Fast-forward DEVASC.txt | 1 + 1 file changed, 1 insertion(+)
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt
I am on my way to passing the Cisco DEVASC exam
I am beginning to understand Git! This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 9: Deleting a branch
devasc@labvm:~/labs/devnet-src/git-intro$ git branch feature
* master
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git branch -d feature Deleted branch feature (was cd828a7).
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git branch
* master
devasc@labvm:~/labs/devnet-src/git-intro$

Part 6: Handling Merge Conflicts
Step 1: Create a new branch test
devasc@labvm:~/labs/devnet-src/git-intro$ git branch test

Step 2: Checkout the branch test
devasc@labvm:~/labs/devnet-src/git-intro$ git checkout test
Switched to branch 'test'
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git branch
master * test
devasc@labvm:~/labs/devnet-src/git-intro$

Step 3: Verify the current contents of DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt I am on my way to passing the Cisco DEVASC exam
I am beginning to understand Git!
This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 4: Modify the contents of DEVASC.txt in the test branch
devasc@labvm:~/labs/devnet-src/git-intro$ sed -i 's/Cisco/NetAcad/' DEVASC.txt

Step 5: Verify the contents of the modified DEVASC.txt in the test branch
devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt I am on my way to passing the NetAcad DEVASC exam
I am beginning to understand Git!
This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 6: Stage and commit the test branch
devasc@labvm:~/labs/devnet-src/git-intro$ git commit -a -m "Change Cisco to NetAcad"
[test b6130a6] Change Cisco to NetAcad
1 file changed, 1 insertion(+), 1 deletion(-)
devasc@labvm:~/labs/devnet-src/git-intro$

Step 7: Checkout the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ git checkout master
Switched to branch 'master'
devasc@labvm:~/labs/devnet-src/git-intro$

devasc@labvm:~/labs/devnet-src/git-intro$ git branch * master
test
devasc@labvm:~/labs/devnet-src/git-intro$

Step 8: Modify the contents of DEVASC.txt in the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ sed -i 's/Cisco/DevNet/' DEVASC.txt

Step 9: Verify the contents of the modified DEVASC.txt in the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt I am on my way to passing the DevNet DEVASC exam
I am beginning to understand Git!
This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 10: Stage and commit the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ git commit -a -m "Changed Cisco to DevNet"
[master 72996c0] Changed Cisco to DevNet
1 file changed, 1 insertion(+), 1 deletion(-)
devasc@labvm:~/labs/devnet-src/git-intro$

Step 11: Attempt to merge the test branch into the master branch

devasc@labvm:~/labs/devnet-src/git-intro$ git merge test
Auto-merging DEVASC.txt CONFLICT (content): Merge conflict in DEVASC.txt
Automatic merge failed; fix conflicts and then commit the result.
devasc@labvm:~/labs/devnet-src/git-intro$

Step 12: Find the conflict
devasc@labvm:~/labs/devnet-src/git-intro$ git log commit 72996c09fa0ac5dd0b8ab9ec9f8530ae2c5c4eb6 (HEAD -> master)
Author: Sample User <sample@example.com>
Date: Sun Apr 19 00:36:05 2020 +0000
Changed Cisco to DevNet
<output omitted>

devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt <<<<<<< HEAD I am on my way to passing the DevNet DEVASC exam
======= I am on my way to passing the NetAcad DEVASC exam >>>>>>> test
I am beginning to understand Git!
This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 13: Manually edit the DEVASC.txt file to remove the conflicting text

devasc@labvm:~/labs/devnet-src/git-intro$ vim DEVASC.txt

<<<<<<< HEAD
I am on my way to passing the DevNet DEVASC exam ======= I am on my way to passing the NetAcad DEVASC exam >>>>>>> test
I am beginning to understand Git!
This text was added originally while in the feature branch

ESC
:
wq
<Enter or Return>

Step 14: Verify your edits of DEVASC.txt in the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ cat DEVASC.txt I am on my way to passing the DevNet DEVASC exam
I am beginning to understand Git!
This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 15: Stage and commit the master branch
devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro$ git commit -a -m "Manually merged from test branch"
[master 22d3da4] Manually merged from test branch
devasc@labvm:~/labs/devnet-src/git-intro$

Step 16: Verify the commit
devasc@labvm:~/labs/devnet-src/git-intro$ git log commit 22d3da41e00549ce69dc145a84884af6a1697734 (HEAD -> master) Merge: 72996c0 b6130a6
Author: Sample User <sample@example.com>
Date: Sun Apr 19 01:09:53 2020 +0000
manually merged from branch test
<output omitted>


Part 7: Integrating Git with GitHub
Step 1: Create a GitHub Account
Step 2: Log into your GitHub Account Create a Repository
Step 3: Create a Repository
Repository name: devasc-study-team
Description: Working together to pass the DEVASC exam
Public/Private: Private
Select: Create repository

Step 4: Create a new directory devasc-study-team
devasc@labvm:~$ cd ~/labs/devnet-src/git-intro
devasc@labvm:~/labs/devnet-src/git-intro$ mkdir devasc-study-team

Step 5: Change directory to devasc-study-team
devasc@labvm:~/labs/devnet-src/git-intro$ cd devasc-study-team
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

Step 6: Copy the DEVASC file
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ cp ../DEVASC.txt

devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ ls DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ cat DEVASC.txt
I am on my way to passing the DevNet DEVASC exam
I am beginning to understand Git!
This text was added originally while in the feature branch
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

Step 7: Initialize a new Git repository
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git init Initialized empty Git repository in /home/devasc/src/git-intro/devasc-study-team/.git/
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git config --list
user.name=SampleUser
user.email=sample@example.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

devasc@labvm:~$ git config --global user.name "GitHub username"
devasc@labvm:~$ git config --global user.email GitHub-email-address

Step 8: Point Git repository to GitHub repository
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git remote add origin https://github.com/github-username/devasc-study-team.git

devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git remote --verbose
origin https://github.com/username/devasc-study-team.git (fetch)
origin https://github.com/username/devasc-study-team.git (push)
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git log fatal: your current branch 'master' does not have any commits yet

Step 9: Stage and Commit the DEVASC.txt file
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git add DEVASC.txt

"Add DEVASC.txt file to devasc-study-team" [master (root-commit) c60635f] Add DEVASC.txt file to devasc-study-team
1 file changed, 3 insertions(+)
create mode 100644 DEVASC.txt
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

Step 10: Verify the commit
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git log commit c60635fe4a1f85667641afb9373e7f49a287bdd6 (HEAD -> master) Author: username <user@example.com>
Date: Mon Apr 20 02:48:21 2020 +0000
Add DEVASC.txt file to devasc-study-team
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git status
On branch master nothing to commit, working tree clean
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

Step 11: Send (push) the file from Git to GitHub
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git push origin master
Username for 'https://github.com': username
Password for 'https://username@github.com': Personal Access Token
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 2 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 347 bytes | 347.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0) To https://github.com/username/devasc-study-team.git
* [new branch] master -> master
devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$

Step 12: Verify file on GitHub

Create a Python Unit Test
Part 1: Launch the DEVASC VM

Part 2: Explore Options in the unittest Framework
devasc@labvm:~/labs/devnet-src$
<output omitted>
optional arguments:
-h, --help show this help message and exit
-v, --verbose Verbose output
-q, --quiet Quiet output
--locals Show local variables in tracebacks
-f, --failfast Stop on first fail or error
-c, --catch Catch Ctrl-C and display results so far
-b, --buffer Buffer stdout and stderr during tests
-k TESTNAMEPATTERNS Only run tests which match the given substring
Examples:
python3 -m unittest test_module - run tests from test_module
python3 -m unittest module.TestClass - run tests from module.TestClass
python3 -m unittest module.Class.test_method - run specified test method
python3 -m unittest path/to/test_file.py - run tests from test_file.py
<output omitted>
For test discovery all test modules must be importable from the top level
directory of the project.
devasc@labvm:~/labs/devnet-src$

Part 3: Test a Python Function with unittest
Step 1: Review the test_data.py file
devasc@labvm:~/labs/devnet-src$ more unittest/test_data.py
key1 = "issueSummary"
key2 = "XY&^$#*@!1234%^&"
data = {
"id": "AWcvsjx864kVeDHDi2gB",
"instanceId": "E-NETWORK-EVENT-AWcvsjx864kVeDHDi2gB-1542693469197",
"category": "Warn",
"status": "NEW",
"timestamp": 1542693469197,
"severity": "P1",
"domain": "Availability",
"source": "DNAC",
"priority": "P1",
"type": "Network",
"title": "Device unreachable",
"description": "This network device leaf2.abc.inc is unreachable from controll
er. The device role is ACCESS.",
"actualServiceId": "10.10.20.82",
"assignedTo": "",
"enrichmentInfo": {
"issueDetails": {
"issue": [
{
--More--(12%)

Step 2: Create the json_search() function that you will be testing
from test_data import *
def json_search(key,input_object):
ret_val=[]
if isinstance(input_object, dict): # Iterate dictionary
for k, v in input_object.items(): # searching key in the dict
if k == key:
temp={k:v}
ret_val.append(temp)
if isinstance(v, dict): # the value is another dict so repeat
json_search(key,v)
elif isinstance(v, list): # it's a list
for item in v:
if not isinstance(item, (str,int)): # if dict or list repeat
json_search(key,item)
else: # Iterate a list because some APIs return JSON object in a list
for val in input_object:
if not isinstance(val, (str,int)):
json_search(key,val)
return ret_val
print(json_search("issueSummary",data))

devasc@labvm:~/labs/devnet-src/unittest$ python3 recursive_json_search.py 
[]
devasc@labvm:~/labs/devnet-src/unittest$

<output omitted>
"issue": [
{
"issueId": "AWcvsjx864kVeDHDi2gB",
"issueSource": "Cisco DNA",
"issueCategory": "Availability",
"issueName": "snmp_device_down",
"issueDescription": "This network device leaf2.abc.inc is unreachable from controller. The device role is ACCESS.",
"issueEntity": "network_device",
"issueEntityValue": "10.10.20.82",
"issueSeverity": "HIGH",
"issuePriority": "", "issueSummary": "Network Device 10.10.20.82 Is Unreachable From Controller",
"issueTimestamp": 1542693469197,
"suggestedActions": [
{
<output omitted>

Step 3: Create some unit tests that will test if the function is working as intended
import unittest

from recursive_json_search import *
from test_data import *

class json_search_test(unittest.TestCase):
'''test module to test search function in `recursive_json_search.py`'''
def test_search_found(self):
'''key should be found, return list should not be empty'''
self.assertTrue([]!=json_search(key1,data))
def test_search_not_found(self):
'''key should not be found, should return an empty list'''
self.assertTrue([]==json_search(key2,data))
def test_is_a_list(self):
'''Should return a list'''
self.assertIsInstance(json_search(key1,data),list)

if __name__ == '__main__':
unittest.main()

Step 4: Run the test to see the initial results
[] .F.
======================================================================
FAIL: test_search_found (__main__.json_search_test)
key should be found, return list should not be empty
----------------------------------------------------------------------
Traceback (most recent call last):
File "test_json_search.py", line 11, in test_search_found
self.assertTrue([]!=json_search(key1,data))
AssertionError: False is not true
----------------------------------------------------------------------
Ran 3 tests in 0.001s
FAILED (failures=1)
devasc@labvm:~/labs/devnet-src/unittest$

devasc@labvm:~/labs/devnet-src/unittest$ python3 -m unittest -v test_json_search
[]
test_is_a_list (test_json_search.json_search_test)
Should return a list ... ok test_search_found (test_json_search.json_search_test) key should be found, return list should not be empty ... FAIL
test_search_not_found (test_json_search.json_search_test)
key should not be found, should return an empty list ... ok
======================================================================
FAIL: test_search_found (test_json_search.json_search_test)
key should be found, return list should not be empty
----------------------------------------------------------------------
Traceback (most recent call last):
File "/home/devasc/labs/devent-src/unittest/test_json_search.py", line 11, in test_search_found
self.assertTrue([]!=json_search(key1,data))
AssertionError: False is not true
----------------------------------------------------------------------
Ran 3 tests in 0.001s
FAILED (failures=1)
devasc@labvm:~/labs/devnet-src/unittest$

Step 5: Investigate and correct the first error in the recursive_json_search.py script
def json_search(key,input_object): ret_val=[]
if isinstance(input_object, dict):
for k, v in input_object.items():
if k == key:
temp={k:v} ret_val.append(temp)

ret_val=[]
def json_search(key,input_object):

devasc@labvm:~/labs/devnet-src/unittest$ python3 recursive_json_search.py
[{'issueSummary': 'Network Device 10.10.20.82 Is Unreachable From Controller'}]
devasc@labvm:~/labs/devnet-src/unittest$

Step 6: Run the test again to see if all errors in the script are now fixed
devasc@labvm:~/labs/devnet-src/unittest$ python3 -m unittest test_json_search
[{'issueSummary': 'Network Device 10.10.20.82 Is Unreachable From Controller'}] ..F
======================================================================
FAIL: test_search_not_found (test_json_search.json_search_test)
key should not be found, should return an empty list
----------------------------------------------------------------------
Traceback (most recent call last):
File "/home/devasc/labs/devnet-src/unittest/test_json_search.py", line 14, in test_search_not_found
self.assertTrue([]==json_search(key2,data))
AssertionError: False is not true
----------------------------------------------------------------------
Ran 3 tests in 0.001s
FAILED (failures=1)
devasc@labvm:~/labs/devnet-src/unittest$

Step 7: Investigate and correct the second error in the recursive_json_search.py script
from test_data import * 
def json_search(key,input_object):
 """
 Search a key from JSON object, get nothing back if key is not found
 key : "keyword" to be searched, case sensitive
 input_object : JSON object to be parsed, test_data.py in this case
 inner_function() is actually doing the recursive search
 return a list of key:value pair
 """
 ret_val=[] 
 def inner_function(key,input_object):
  if isinstance(input_object, dict): # Iterate dictionary
   for k, v in input_object.items(): # searching key in the dict
    if k == key:
     temp={k:v}
     ret_val.append(temp)
    if isinstance(v, dict): # the value is another dict so repeat
     inner_function(key,v)
    elif isinstance(v, list):
     for item in v:
      if not isinstance(item, (str,int)): # if dict or list repeat
       inner_function(key,item)
  else: # Iterate a list because some APIs return JSON object in a list
   for val in input_object:
    if not isinstance(val, (str,int)):
     inner_function(key,val)
 inner_function(key,input_object)
 return ret_val
print(json_search("issueSummary",data))


Parse Different Data Types with Python

Part 1: Launch the DEVASC VM

Part 2: Parse XML in Python
<?xml version="1.0" encoding="UTF-8"?>
<rpc message-id="1"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<edit-config>
<target>
<candidate/>
</target>
<default-operation>merge</default-operation>
<test-option>set</test-option>
<config>
<int8.1
xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"
nc:operation="create"
xmlns="http://netconfcentral.org/ns/test">9</int8.1>
</config>
</edit-config>
</rpc>

Step 1: Build a script to parse the XML data
import xml.etree.ElementTree as ET
import re

xml = ET.parse("myfile.xml")
root = xml.getroot()

ns = re.match('{.*}', root.tag).group(0)
editconf = root.find("{}edit-config".format(ns))
defop = editconf.find("{}default-operation".format(ns))
testop = editconf.find("{}test-option".format(ns))

print("The default-operation contains: {}".format(defop.text))
print("The test-option contains: {}".format(testop.text))

Step 2: Run the script
devasc@labvm:~/labs/devnet-src/parsing$ python3 parsexml.py
The default-operation contains: merge
The test-option contains: set
devasc@labvm:~/labs/devnet-src/parsing$

Part 3: Parse JSON in Python
{
"access_token":"ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3",
"expires_in":1209600,
"refresh_token":"MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4",
"refreshtokenexpires_in":7776000
}
Step 1: Build a script to parse the JSON data
import json
import yaml

with open('myfile.json','r') as json_file:
ourjson = json.load(json_file)

print(ourjson)

Step 2: Run the script to print the JSON data and then modify it to print data of interest
devasc@labvm:~/labs/devnet-src/parsing$ python3 parsejson.py
{'access_token': 'ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3', 'expires_in': 1209600, 'refresh_token': 'MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4', 'refreshtokenexpires_in': 7776000}
devasc@labvm:~/labs/devnet-src/parsing$

print("The access token is: {}".format(ourjson['access_token']))
print("The token expires in {} seconds.".format(ourjson['expires_in']))

devasc@labvm:~/labs/devnet-src/parsing$ python3 parsejson.py
{'access_token': 'ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3', 'expires_in': 1209600, 'refresh_token': 'MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4', 'refreshtokenexpires_in': 7776000}
1209600
The access token is ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3
The token expires in 1209600 seconds
devasc@labvm:~/labs/devnet-src/parsing$

Step 3: Output the parsed JSON data in a YAML data format
print("\n\n---")
print(yaml.dump(ourjson))

devasc@labvm:~/labs/devnet-src/parsing$ python3 parsejson.py
<output from previous steps omitted>
---
access_token: ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3
expires_in: 1209600
refresh_token: MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4
refreshtokenexpires_in: 7776000
devasc@labvm:~/labs/devnet-src/parsing$

Part 4: Parse YAML in Python

access_token: ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3
expires_in: 1209600
refresh_token: MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4
refreshtokenexpires_in: 7776000

Step 1: Build a script to parse the YAML data
import json
import yaml

with open('myfile.yaml','r') as yaml_file:
ouryaml = yaml.safe_load(yaml_file)

print(ouryaml)

Step 2: Run the script to print the YAML data and then modify it to print data of interest
devasc@labvm:~/labs/devnet-src/parsing$ python3 parseyaml.py
{'access_token': 'ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3', 'expires_in': 1209600, 'refresh_token': 'MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4', 'refreshtokenexpires_in': 7776000}
devasc@labvm:~/labs/devnet-src/parsing$

print("The access token is {}".format(ouryaml['access_token']))
print("The token expires in {} seconds.".format(ouryaml['expires_in']))

devasc@labvm:~/labs/devnet-src/parsing$ python3 parseyaml.py
{'access_token': 'ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3', 'expires_in': 1209600, 'refresh_token': 'MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4', 'refreshtokenexpires_in': 7776000}
The access token is ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3
The token expires in 1209600 seconds.
devasc@labvm:~/labs/devnet-src/parsing$

Step 3: Output the parsed YAML data in a JSON data format
print("\n\n")
print(json.dumps(ouryaml, indent=4))

devasc@labvm:~/labs/devnet-src/parsing$ python3 parseyaml.py
<output from previous steps omitted>
{
"access_token": "ZDI3MGEyYzQtNmFlNS00NDNhLWFlNzAtZGVjNjE0MGU1OGZmZWNmZDEwN2ItYTU3",
"expires_in": 1209600,
"refresh_token": "MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTEyMzQ1Njc4",
"refreshtokenexpires_in": 7776000
}
devasc@labvm:~/labs/devnet-src/parsing$

• Task verification:
Checkout screenshots
