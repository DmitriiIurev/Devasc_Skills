Python Programming Review

Part 2: Starting Python and VS Code
Step 1: Start Python
python3 -V
Step 2: Use the Interpreter as a calculator
>>> 2+3
5
>>> 10-4
6
>>> 2*4
8
>>> 20/5
4.0
>>> 3**2
9
Step 3: Use the interactive interpreter to print a string
>>> "Hello World!"
'Hello World!'
>>> 'Hello World!'
'Hello World!'
>>> print("Hello World!")
Hello World!
>>> quit()
devasc@labvm:~$

Step 4: Open VS Code and create a script for Hello World
devasc@labvm:~/labs/devnet-src/python$ python3 hello-world.py
Hello World!
devasc@labvm:~/labs/devnet-src/python$
devasc@labvm:~$ python3 ~/labs/devnet-src/python/hello-world.py
Hello World!
devasc@labvm:~$

Part 3: Review Data Types and Variables
Step 1: Use the interactive interpreter to review basic data types
devasc@labvm:~/labs/devnet-src$ python3
Python 3.8.2 (default, Mar 13 2020, 10:14:16)
[GCC 9.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> type(98)
<class 'int'>
>>> type(98.6)
<class 'float'>
>>> type("Hi!")
<class 'str'>
>>> type(True)
<class 'bool'>

Step 2: Review different Boolean operators
>>> 1<2
True
>>> 1<1
False
>>> 1==1
True
>>> 1>=1
True
>>> 1<=1
True

Step 3: Use the interpreter to create and use a variable
>>> x=3
>>> x*5
15
>>> "Cisco"*x
'CiscoCiscoCisco'

Step 4: Use the interpreter to concatenate multiple string variables
>>> str1="Cisco"
>>> str2="Networking"
>>> str3="Academy"
>>> space=" "
>>> print(str1+space+str2+space+str3)
Cisco Networking Academy

>>> print(str1,str2,str3)
Cisco Networking Academy

Step 5: Reviewing casting and printing different data types
>>> x=3
>>> print("The value of x is " + x)
Traceback (most recent call last):
File "<stdin>", line 1, in <module> TypeError: can only concatenate str (not "int") to str
>>>

>>> print("The value of x is " + str(x))
The value of x is 3
>>> type(x)
<class 'int'>

>>> x=str(x)
>>> type(x)
<class 'str'>

>>> num = 22/7
>>> f"The value of num is {num}"
'The value of num is 3.142857142857143'
>>> pi = "{:.2f}".format(num)
>>> f"The value of pi is {pi}."
'The value of pi is 3.14.'
>>>

Part 4: Review Lists and Dictionaries
Step 1: Create and manipulate a list
>>> hostnames=["R1","R2","R3","S1","S2"]
>>> type(hostnames)
<class 'list'>
>>> len(hostnames)
5
>>> hostnames
['R1', 'R2', 'R3', 'S1', 'S2']

>>> hostnames[0]
'R1'
>>> hostnames[-1]
'S2'
>>> hostnames[0]="RTR1"
>>> hostnames
['RTR1', 'R2', 'R3', 'S1', 'S2']
>>> del hostnames[3]
>>> hostnames
['RTR1', 'R2', 'R3', 'S2']
>>>

Step 2: Create and manipulate a dictionary
>>> ipAddress={"R1":"10.1.1.1","R2":"10.2.2.1","R3":"10.3.3.1"}
>>> type(ipAddress)
<class 'dict'>

>>> ipAddress
{'R1': '10.1.1.1', 'R2': '10.2.2.1', 'R3': '10.3.3.1'}
>>> ipAddress['R1']
'10.1.1.1' >>> ipAddress["S1"]="10.1.1.10"
>>> ipAddress
{'R1': '10.1.1.1', 'R2': '10.2.2.1', 'R3': '10.3.3.1', 'S1': '10.1.1.10'}
>>>

>>> ipAddress["R3"]=["10.3.3.1","10.3.3.2","10.3.3.3"]
>>> ipAddress
{'S1': '10.1.1.10', 'R2': '10.2.2.1', 'R1': '10.1.1.1', 'R3': ['10.3.3.1', '10.3.3.2', '10.3.3.3']}
>>>

Part 5: Review the Input Function
Step 1: Create a variable to store user input and then display the value
>>> firstName = input("What is your first name? ")
What is your first name? User_Name
>>> print("Hello " + firstName +"!")
Hello User_Name!
>>>

Step 2: Create a script to collect personal information
devasc@labvm:~/labs/devnet-src$ python3 person-info.py
What is your first name? Bob
What is your last name? Smith
What is your location? London
What is your age? 36
Hi Bob Smith! Your location is London and you are 36 years old.
devasc@labvm:~/labs/devnet-src$ ^C

Part 6: Review If, For, and While Functions
Step 1: Create an if/else function
nativeVLAN = 1
dataVLAN = 100
if nativeVLAN == dataVLAN:
print("The native VLAN and the data VLAN are the same.")
else:
print("The native VLAN and the data VLAN are different.")

Step 2: Create an if/elif/else function
aclNum = int(input("What is the IPv4 ACL number? "))
if aclNum >= 1 and aclNum <= 99:
print("This is a standard IPv4 ACL.")
elif aclNum >=100 and aclNum <= 199:
print("This is an extended IPv4 ACL.")
else:
print("This is not a standard or extended IPv4 ACL.")

devasc@labvm:~/labs/devnet-src/python$ python3 if-acl.py
What is the IPv4 ACL number? 10
This is a standard IPv4 ACL.
devasc@labvm:~/labs/devnet-src/python$ python3 if-acl.py
What is the IPv4 ACL number? 110
This is an extended IPv4 ACL.
devasc@labvm:~/labs/devnet-src/python$ python3 if-acl.py
What is the IPv4 ACL number? 200
This is not a standard or extended IPv4 ACL.
devasc@labvm:~/labs/devnet-src/python$

Step 3: Create a for loop
devasc@labvm:~/labs/devnet-src/python$ python3
Python 3.8.2 (default, Mar 13 2020, 10:14:16)
[GCC 9.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.>>> devices=["R1","R2","R3","S1","S2"]
>>> for item in devices:
... print(item)
...
R1
R2
R3
S1
S2
>>>

>>> for item in devices:
... if "R" in item:
... print(item)
...
R1
R2
R3
>>>

>>> switches=[]
>>> for item in devices:
... if "S" in item:
... switches.append(item)
...
>>> switches
['S1', 'S2']
>>>

Step 4: While Loop
x=input("Enter a number to count to: ")
x=int(x)
y=1
while y<=x:
print(y)
y=y+1

devasc@labvm:~/labs/devnet-src/python$ python3 while-loop.py
Enter a number to count to: 10
1
2
3
4
5
6
7
8
9
10
devasc@labvm:~/labs/devnet-src/python$

x=input("Enter a number to count to: ")
x=int(x)
y=1
while True:
print(y)
y=y+1
if y>x:
break

Step 5: Use a while loop to check for a user quit command
while True:
x=input("Enter a number to count to: ") if x == 'q' or x == 'quit': break
x=int(x)
y=1
while True:
print(y)
y=y+1
if y>x:
break

devasc@labvm:~/labs/devnet-src/python$ python3 while-loop.py
Enter a number to count to: 3
1
2
3
Enter a number to count to: 5
1
2
3
4
5
Enter a number to count to: quit
devasc@labvm:~/labs/devnet-src/python$

Part 7: Review Methods for File Access
Step 1: Create a program that reads an external file

file=open("devices.txt","r")
for item in file:
print(item)
file.close()

devasc@labvm:~/labs/devnet-src/python$ python3 file-access.py
Cisco 819 Router
Cisco 881 Router
Cisco 888 Router
Cisco 1100 Router
Cisco 4321 Router
Cisco 4331 Router
Cisco 4351 Router
Cisco 2960 Catalyst Switch
Cisco 3850 Catalyst Switch
Cisco 7700 Nexus Switch
Cisco Meraki MS220-8 Cloud Managed Switch
Cisco Meraki MX64W Security Appliance
Cisco Meraki MX84 Security Appliance
Cisco Meraki MC74 VoIP Phone
Cisco 3860 Catalyst Switch
devasc@labvm:~/labs/devnet-src/python$

Step 2: Remove the blank lines from the output

file=open("devices.txt","r")
for item in file: item=item.strip()
print(item)
file.close()

devasc@labvm:~/labs/devnet-src/python$ python3 file-access.py
Cisco 819 Router
Cisco 881 Router
Cisco 888 Router
Cisco 1100 Router
Cisco 4321 Router
Cisco 4331 Router
Cisco 4351 Router
Cisco 2960 Catalyst Switch
Cisco 3850 Catalyst Switch
Cisco 7700 Nexus Switch
Cisco Meraki MS220-8 Cloud Managed Switch
Cisco Meraki MX64W Security Appliance
Cisco Meraki MX84 Security Appliance
Cisco Meraki MC74 VoIP Phone
Cisco 3860 Catalyst Switch
devasc@labvm:~/labs/devnet-src/python$

Step 3: Copy the content of a file into a list variable

devices=[]
file=open("devices.txt","r")
for item in file:
item=item.strip() devices.append(item)
file.close() print(devices)

devasc@labvm:~/labs/devnet-src/python$ python3 file-access.py
['Cisco 819 Router', 'Cisco 881 Router', 'Cisco 888 Router', 'Cisco 1100 Router', 'Cisco 4321 Router', 'Cisco 4331 Router', 'Cisco 4351 Router', 'Cisco 2960 Catalyst Switch', 'Cisco 3850 Catalyst Switch', 'Cisco 7700 Nexus Switch', 'Cisco Meraki MS220-
8 Cloud Managed Switch', 'Cisco Meraki MX64W Security Appliance', 'Cisco Meraki MX84 Security Appliance', 'Cisco Meraki MC74 VoIP Phone', 'Cisco 3860 Catalyst Switch']
devasc@labvm:~/labs/devnet-src/python$

Step 4: Challenge: Create a script to allow the user to add devices

devasc@labvm:~/labs/devnet-src/python$ python3 file-access-input.py
Enter device name: Cisco 1941 Router
Enter device name: Cisco 2950 Catalyst Switch
Enter device name: exit
All done!
devasc@labvm:~/labs/devnet-src/python$

Explore Python Development Tools
Part 1: Launch the DEVASC VM

Part 2: Review the Python Installation

devasc@labvm:~$ python3 -V
Python 3.8.2
devasc@labvm:~$

devasc@labvm:~$ which python3
/usr/bin/python3
devasc@labvm:~$

Part 3: PIP and Python Virtual Environments
Step 1: Create a Python 3 virtual environment

devasc@labvm:~$ cd labs/devnet-src/python/
devasc@labvm:~/labs/devnet-src/python$

devasc@labvm:~/labs/devnet-src/python$ python3 -m venv devfun
devasc@labvm:~/labs/devnet-src/python$

Step 2: Activate and test the Python 3 virtual environment

devasc@labvm:~/labs/devnet-src/python$ source devfun/bin/activate (devfun) devasc@labvm:~/labs/devnet-src/python$

(devfun) devasc@labvm:~/labs/devnet-src/python$ pip3 freeze
(devfun) devasc@labvm:~/labs/devnet-src/python$

(devfun) devasc@labvm:~/labs/devnet-src/python$ pip3 install requests
Collecting requests
Downloading requests-2.23.0-py2.py3-none-any.whl (58 kB)
|████████████████████████████████| 58 kB 290 kB/s
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
Downloading urllib3-1.25.9-py2.py3-none-any.whl (126 kB)
|████████████████████████████████| 126 kB 1.7 MB/s
Collecting idna<3,>=2.5
Downloading idna-2.9-py2.py3-none-any.whl (58 kB)
|████████████████████████████████| 58 kB 18.3 MB/s
Collecting certifi>=2017.4.17
Downloading certifi-2020.4.5.1-py2.py3-none-any.whl (157 kB)
|████████████████████████████████| 157 kB 19.8 MB/s
Collecting chardet<4,>=3.0.2
Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
|████████████████████████████████| 133 kB 59.2 MB/s
Installing collected packages: urllib3, idna, certifi, chardet, requests
Successfully installed certifi-2020.4.5.1 chardet-3.0.4 idna-2.9 requests-2.23.0 urllib3-1.25.9

(devfun) devasc@labvm:~/labs/devnet-src/python$

(devfun) devasc@labvm:~/labs/devnet-src/python$ pip3 freeze
certifi==2020.4.5.1
chardet==3.0.4
idna==2.10
requests==2.24.0
urllib3==1.25.9
(devfun) devasc@labvm:~/labs/devnet-src/python$

(devfun) devasc@labvm:~/labs/devnet-src/python$ deactivate
devasc@labvm:~/labs/devnet-src/python$

Step 3: Check the current packages installed in the system environment

devasc@labvm:~/labs/devnet-src/python$ python3 -m pip freeze
ansible==2.9.4
apache-libcloud==2.8.0
appdirs==1.4.3
argcomplete==1.8.1
astroid==2.3.3
bcrypt==3.1.7
blinker==1.4
certifi==2019.11.28
<output omitted>
xmltodict==0.12.0
zipp==1.0.0
devasc@labvm:~/labs/devnet-src/python$

devasc@labvm:~/labs/devnet-src/python$ python3 -m pip freeze | grep requests
requests==2.22.0
requests-kerberos==0.12.0
requests-ntlm==1.1.0
requests-toolbelt==0.9.1
requests-unixsocket==0.2.0
devasc@labvm:~/labs/devnet-src/python$

Part 4: Sharing Your Virtual Environment

devasc@labvm:~/labs/devnet-src/python$ source devfun/bin/activate
(devfun) devasc@labvm:

(devfun) devasc@labvm:~/labs/devnet-src/python$ pip3 freeze > requirements.txt

(devfun) devasc@labvm:~/labs/devnet-src/python$ deactivate
devasc@labvm:~/labs/devnet-src/python$ ls devfun file-access-input.py if-acl.py requirements.txt
devices.txt file-access.py if-vlan.py while-loop.py
devnew hello-world.py person-info.py

devasc@labvm:~/labs/devnet-src/python$ python3 -m venv devnew
devasc@labvm:~/labs/devnet-src/python$ source devnew/bin/activate (devnew) devasc@labvm:~/labs/devnet-src/python$

(devnew) devasc@labvm:~/labs/devnet-src/python$ pip3 install -r requirements.txt
Collecting certifi==2020.4.5.1
Using cached certifi-2020.4.5.1-py2.py3-none-any.whl (157 kB)
Collecting chardet==3.0.4
Using cached chardet-3.0.4-py2.py3-none-any.whl (133 kB)
Collecting idna==2.9
Using cached idna-2.9-py2.py3-none-any.whl (58 kB)
Requirement already satisfied: pkg-resources==0.0.0 in ./devnew/lib/python3.8/site-packages (from -r requirements.txt (line 4)) (0.0.0)
Collecting requests==2.23.0
Using cached requests-2.23.0-py2.py3-none-any.whl (58 kB)
Collecting urllib3==1.25.9
Using cached urllib3-1.25.9-py2.py3-none-any.whl (126 kB)
Installing collected packages: certifi, chardet, idna, urllib3, requests
Successfully installed certifi-2020.4.5.1 chardet-3.0.4 idna-2.9 requests-2.23.0 urllib3-1.25.9
(devnew) devasc@labvm:~/labs/devnet-src/python$

(devnew) devasc@labvm:~/labs/devnet-src/python$ pip3 freeze
certifi==2020.4.5.1
chardet==3.0.4
idna==2.9
pkg-resources==0.0.0

requests==2.23.0
urllib3==1.25.9
(devnew) devasc@labvm:~/labs/devnet-src/python$
g. Deactivate the devnew virtual environment.
(devnew) devasc@labvm:~/labs/devnet-src/python$ deactivate
devasc@labvm:~/labs/devnet-src/python$

Explore Python Classes

Part 1: Launch the DEVASC VM

Part 2: Review Functions, Methods, and Classes
Step 1: What is a function?
# Define the function
def functionName:
...blocks of code...
# Call the function
functionName()

Step 2: What is a method?
# Define the class
class className
# Define a method
def method1Name
...blocks of code
# Define another method
def method2Name
...blocks of code
# Define yet another method
def method3Name
...blocks of code
# Instantiate the class
myClass = className()
# Call the instantiation and associated methods
myClass.method1Name()
myClass.method2Name()
myClass.method3Name()

Part 3: Define a Function

def myCity(city):
print("I live in " + city + ".")

myCity("Austin")
myCity("Tokyo")
myCity("Salzburg")

devasc@labvm:~/labs/devnet-src/python$ python3 myCity.py
I live in Austin.
I live in Tokyo.
I live in Salzburg.
devasc@labvm:~/labs/devnet-src/python$

Part 4: Define a Class with Methods
Step 1: Define and then instantiate a class with the __init__() method

class Location:
|<-- cursor should now be here

def __init__(self, name, country):
self.name = name
self.country = country
|<-- cursor should now be here

loc = Location("Your_Name", "Your_Country")

print(loc.name)
print(loc.country)

print(type(loc))

devasc@labvm:~/labs/devnet-src/python$ python3 myLocation.py
Your_Name
Your_Country
<class '__main__.Location'>
devasc@labvm:~/labs/devnet-src/python$

Step 2: Add a method to the Location class

class Location:
def __init__(self, name, country):
self.name = name
self.country = country

self.country = country
|<--Your cursor should be here

def myLocation(self):
print("Hi, my name is " + self.name + " and I live in " + self.country + ".")

Step 3: Instantiate the Location class multiple times and call the myLocation method

# First instantiation of the class Location
loc1 = Location("Tomas", "Portugal")
# Call a method from the instantiated class
loc1.myLocation()

devasc@labvm:~/labs/devnet-src/python$ python3 myLocation.py
Hi, my name is Tomas and I live in Portugal.
devasc@labvm:~/labs/devnet-src/python$

loc2 = Location("Ying", "China")
loc3 = Location("Amare", "Kenya")

loc3.myLocation()
your_loc = Location("Your_Name", "Your_Country")
your_loc.myLocation()
devasc@labvm:~/labs/devnet-src/python$ python3 myLocation.py
Hi, my name is Tomas and I live in Portugal.
Hi, my name is Ying and I live in China.
Hi, my name is Amare and I live in Kenya.
Hi, my name is Your_Name and I live in Your_Country.
devasc@labvm:~/labs/devnet-src/python$

Step 4: Review the complete myLocation.py script

# Define a class with variables for **name** and **country**.
# Then define a method that belongs to the class. The method’s
# purpose is to print a sentence that uses the variables.
class Location:
def __init__(self, name, country):
self.name = name
self.country = country
def myLocation(self):
print("Hi, my name is " + self.name + " and I live in " + self.country + ".")
# First instantiation of the Location class
loc1 = Location("Tomas", "Portugal")
# Call a method from the instantiated class
loc1.myLocation()
# Three more instantiations and method calls for the Location class
loc2 = Location("Ying", "China")
loc3 = Location("Amare", "Kenya")
loc2.myLocation()
loc3.myLocation()
your_loc = Location("Your_Name", "Your_Country")
your_loc.myLocation()

Part 5: Review the circleClass.py Script

# Given a radius value, print the circumference of a circle.
# Formula for a circumference is c = pi * 2 * radius
class Circle:
def __init__(self, radius):
self.radius = radius
def circumference(self):
pi = 3.14
circumferenceValue = pi * self.radius * 2
return circumferenceValue
def printCircumference(self):
myCircumference = self.circumference()
print ("Circumference of a circle with a radius of " + str(self.radius) + " is " + str(myCircumference))
# First instantiation of the Circle class.
circle1 = Circle(2)
# Call the printCircumference for the instantiated circle1 class.
circle1.printCircumference()
# Two more instantiations and method calls for the Circle class.
circle2 = Circle(5)
circle2.printCircumference()
circle3 = Circle(7)
circle3.printCircumference()

